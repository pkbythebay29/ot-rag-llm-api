name: RAG LLM Pipeline CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

permissions:
  contents: read
  actions: read

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

env:
  PIP_DISABLE_PIP_VERSION_CHECK: "1"
  HF_HOME: ${{ github.workspace }}/.cache/huggingface
  TRANSFORMERS_CACHE: ${{ github.workspace }}/.cache/huggingface/transformers
  HF_DATASETS_CACHE: ${{ github.workspace }}/.cache/huggingface/datasets
  TORCH_HOME: ${{ github.workspace }}/.cache/torch

jobs:
  lint:
    name: Lint & static checks
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"
          cache: "pip"

      - name: Install linters
        run: |
          python -m pip install -U pip
          pip install ruff==0.5.4 mypy==1.10.0

      - name: Ruff lint & format check
        run: |
          ruff check .
          ruff format --check .

      - name: Mypy type check
        run: |
          mypy rag_llm_api_pipeline || true

  test:
    name: Unit tests (Linux, matrix)
    runs-on: ubuntu-latest
    needs: [lint]
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.9", "3.10", "3.11"]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: "pip"

      - name: Cache HF/Torch
        uses: actions/cache@v4
        with:
          path: |
            .cache/huggingface
            .cache/torch
          key: hf-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            hf-${{ runner.os }}-${{ matrix.python-version }}-
            hf-${{ runner.os }}-

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y ffmpeg tesseract-ocr libgl1 libglib2.0-0

      - name: Install Python dependencies
        run: |
          python -m pip install -U pip
          pip install -r requirements.txt
          pip install pytest pytest-cov
          pip install -e .

      - name: Run tests with coverage
        run: |
          pytest rag_llm_api_pipeline/tests -q \
            --cov=rag_llm_api_pipeline --cov-report=xml --cov-report=term
        env:
          PYTHONWARNINGS: ignore

      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-${{ matrix.python-version }}
          path: coverage.xml

      - name: Upload junit results (if present)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: junit-${{ matrix.python-version }}
          path: test-results.xml
          if-no-files-found: ignore

      - name: Basic smoke tests
        run: |
          rag-cli --help || true
          mkdir -p indices config webapp
          python -c "from rag_llm_api_pipeline.api.server import app; print('fastapi ok')"